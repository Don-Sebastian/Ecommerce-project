<style>
    .g-height-50 {
        height: 50px;
    }

    .g-width-50 {
        width: 50px !important;
    }

    @media (min-width: 0) {
        .g-pa-30 {
            padding: 2.14286rem !important;
        }
    }

    .g-bg-secondary {
        background-color: #fafafa !important;
    }

    .u-shadow-v18 {
        box-shadow: 0 5px 10px -6px rgba(0, 0, 0, 0.15);
    }

    .g-color-gray-dark-v4 {
        color: #777 !important;
    }

    .g-font-size-12 {
        font-size: 0.85714rem !important;
    }

    .media-comment {
        margin-top: 20px
    }

    .singleImageCanvasContainer {
        overflow: hidden;
        height: 350px;
        width: 30%;
        display: inline-block;
        position: relative;
        padding-right: 0px;
        margin-right: 15px;
        border: 2px solid #dfdfdf;
        margin-bottom: 10px;
        padding: 4px;
        border-radius: .25rem;
    }

    .singleImageCanvasContainer .singleImageCanvasCloseBtn {
        position: absolute;
        right: 0;
    }

    .singleImageCanvasContainer .singleImageCanvas {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
</style>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css"
    integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.css">
<link href="/admin/vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">
<main id="main" class="main">
    <section class="section">
        <div class="row">
            <div class="col-lg-7 offset-2">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Add Products</h5>
                        <!-- General Form Elements -->
                        <form method="post" action="/admin/add-products" enctype="multipart/form-data">
                            <div class="row mb-3">
                                <label for="inputText" class="col-sm-2 col-form-label">Product name</label>
                                <div class="col-sm-10" >
                                    <input type="text" name="name" id="name" onkeyup=nameValidate() class="form-control" required>
                                     <span style="color:red ;" id='nameError'></span>
                                </div>
                            </div>
                            <div class="row mb-3">
                                <label for="inputEmail" class="col-sm-2 col-form-label">Price</label>
                                <div class="col-sm-10">
                                    <input type="number" name="price" id="price" onkeyup="priceValidate()" class="form-control" required>
                                     <span style="color:red ;" id='priceError'></span>
                                </div>
                            </div>
                            <div class="form-outline mb-4">
                                <label class="form-label" for="id_image">Image</label>
                                <span id="croppedImages"></span>
                                <input type="file" class="form-control" id="id_image" name="image" data-toggle="modal"
                                    data-target="#exampleModal" accept="image/*" multiple required>

                            </div>
                            <div class="row mb-3">
                                <label for="inputPassword" class="col-sm-2 col-form-label">Description</label>
                                <div class="col-sm-10">
                                    <input class="form-control" name="description" id="description" onkeyup="descriptionValidate()" style="height: 100px" required>
                                     <span style="color:red ;" id='descriptionError'></span>
                                </div>
                            </div>
                            <fieldset class="row mb-3">
                                <legend class="col-form-label col-sm-2 pt-0">Availability</legend>
                                <div class="col-sm-10">
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="avilability" id="gridRadios1"
                                            value="0" checked >
                                        <label class="form-check-label" for="gridRadios1">
                                            Available
                                        </label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="avilability" id="gridRadios2"
                                            value="1">
                                        <label class="form-check-label" for="gridRadios2">
                                            Unavailable
                                        </label>
                                    </div>
                                </div>
                            </fieldset>
                            <div class="row mb-3">
                                <label class="col-sm-2 col-form-label">Select</label>
                                <div class="col-sm-10">
                                    <select class="form-select" aria-label="Default select example" name="category">
                                        {{#each category}}
                                        <option value={{category}}>{{this.category}} </option>
                                        {{/each}}
                                    </select>
                                </div>
                            </div>
                             <div class="row mb-3">
                                <div class="col-sm-10">
                                    <input type="number" name="view" class="form-control" value="0" hidden>
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-sm-10">
                                    <button type="submit" class="btn btn-primary">Add</button>
                                </div>
                            </div>
                        </form><!-- End General Form Elements -->
                    </div>
                </div>

            </div>
        </div>
    </section>
</main>
<a href="#" class="back-to-top d-flex align-items-center justify-content-center"><i
        class="bi bi-arrow-up-short"></i></a>

<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group row" id="test">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal">Save changes</button>
            </div>
        </div>
    </div>
</div>










<script>
    const input = document.getElementById('id_image')
    const test = document.getElementById('test')
    input.addEventListener('change', () => {
        alert(input)
        // Getting image file object from the input variable
        const img_data = []
        // const imagebox = []
        // const crop_btn = []
        // const confirm_btn = []
        const url = []
        const length = input.files.length
        for (i = 0; i < length; i++) {
            test.innerHTML += `<div class="col-4"><div id="image-box${i}" class="image-container" style="height: 200px; width: 200px;"> </div>
    <button class="btn btn-outline-info" id="crop-btn${i}" style="width: 100%; margin-top: 10px; display: block;" type="button">Crop</button> </div>`
        }
        for (i = 0; i < length; i++) {
            img_data[i] = input.files[i]
        }

        img_data.forEach((image_data, i) => {
            url[i] = URL.createObjectURL(image_data)
        })
        // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
        // The new object URL represents the specified File object or Blob object.
        url.forEach((url, i) => {
            document.getElementById('image-box' + i).innerHTML = `<img src="${url}" id="image${i}" style="width:100%;">`
        })

        // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.

        // Storing that cropping view image in a variable


        // Displaying the image box
        for (i = 0; i < length; i++) {
            document.getElementById('image-box' + i).style.display = 'block'
            document.getElementById('crop-btn' + i).style.display = 'block'
        }


        for (i = 0; i < length; i++) {
            cropper(img_data[i], document.getElementById('image' + i), i, document.getElementById('crop-btn' + i), document.getElementById('image-box' + i))
        }



        // Creating a croper object with the cropping view image
        // The new Cropper() method will do all the magic and diplay the cropping view and adding cropping functionality on the website
        // For more settings, check out their official documentation at https://github.com/fengyuanchen/cropperjs
        let container = new DataTransfer();
        let fileInputElement = document.getElementById('id_image');



        function cropper(img_data, image, index, crop_btn, imagebox) {

            const cropper = new Cropper(image, {
                autoCropArea: 1,
                viewMode: 1,
                scalable: false,
                zoomable: false,
                movable: false,
                minCropBoxWidth: 50,
                minCropBoxHeight: 50,
            })

            // When crop button is clicked this event will get triggered
            crop_btn.addEventListener('click', () => {
                // This method coverts the selected cropped image on the cropper canvas into a blob object
                cropper.getCroppedCanvas().toBlob((blob) => {

                    // Gets the original image data
                    // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
                    let file = new File([blob], img_data.name, { type: "image/*", lastModified: new Date().getTime() });
                    // Create a new container

                    // Add the cropped image file to the container
                    container.items.add(file);

                    fileInputElement.files = container.files

                    // Replace the original image file with the new cropped image file
                    // Hide the cropper box
                    imagebox.style.display = 'none'
                    // Hide the crop button
                    crop_btn.style.display = 'none'
                });
            });
        }
    });
</script>

<script>
    
    var nameError = document.getElementById('nameError');
    var priceError = document.getElementById('priceError');
    var descriptionError = document.getElementById('descriptionError');
    function nameValidate() {
        var name = document.getElementById('name').value;
        if (name.length <= 3) {
            nameError.innerHTML = " product name is too short";
            return false;
        }
        if (!name.match(/^[A-Za-z ]+$/)) {
            nameError.innerHTML = "product name is invalid";
            return false;
        }
        nameError.innerHTML = "";
        return true;
    }


    function priceValidate() {
        var price = document.getElementById('price').value;
        if (price.length <= 2) {
            priceError.innerHTML = "price is too low";
            return false;
        }
        if(price ==='0000'|| price==='000'){
             priceError.innerHTML = "enter valid price";
            return false;
        }
        priceError.innerHTML = "";
        return true
    }
    function descriptionValidate() {
        var description = document.getElementById('description').value;
        if (description.length <= 30) {
            descriptionError.innerHTML = " description is too short";
            return false;
        }
        descriptionError.innerHTML = "";
        return true;
    }

  function validation() {
    var check = (element)=>{
        if(element){
            return true
        }else{
            return false
        }
    }
    var array =[nameValidate(),priceValidate(),descriptionValidate(),]
    if (array.every(check)) {
       console.log('false........................................................................................................................')
        return true

    }
}
</script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.js"></script>
<script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"
    integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN"
    crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js"
    integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q"
    crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js"
    integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl"
    crossorigin="anonymous"></script>